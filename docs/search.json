[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dr. Mark Dunning",
    "section": "",
    "text": "I’m a Bioinformatician with a background in Mathematics and Computer Science with over 20 years of experience. I specialise in the visualisation and interpretation of complex data and have a wealth of experience in making results accessible and easy to interrogate for wet-lab biologists. I also have a track-record in developing and delivering training courses and workships, along with formal teaching.\nI obtained my PhD in the Statistics and Computational Biology group of Simon Tavare at the University of Cambridge. During this time, I developed the beadarray Bioconductor package for the analysis of Illumina microarray data. My PhD thesis is available online, should you be interested.\nAfter my PhD, I worked as a Bioinformatics Analyst within the Bioinformatics Core; consulting on, and assisting in, the analysis on all types of high-throughput datasets. During this time I worked on studies to define subtypes of Breast and Prostate cancer and established pipelines for analysis whole-genome and exome resequencing data.\nI held the role of “Bioinformatics Training Coordinator” in the Bioinformatics Core of Cancer Research Uk Cambridge Institute. I organised, developed and facilitated Bioinformatics training courses to teach computational and analytical skills to wet-lab biologists.\nFrom October 2017 I established the Bioinformatics Core at The University of Sheffield which ran until August 2025. Along with supporting clinicians and researchers across campus, I also contributed to various MSC and undergraduate programs as well as obtaining training / teaching qualifications from thecarpentries and AdvanceHE (FHEA)"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "training/r/index.html",
    "href": "training/r/index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Disclaimer\n\nAlthough R is well-regarded as a tool for performing statistical analysis, this workshop will not explicitly teach stats. Instead we give introduce the tools that we allow you to manipulate and interrogate your data into a form with which you can execute statistical tests.\n\n\n\nSetup\nIf you are following these notes independently (outside one of our workshops)\nFrom the RStudio menus, Choose the File -&gt; New Project option and select New Directory from the new window\n\nThen for the Project Type pick New Project.\n\nIt will ask you to pick a new Directory name, and where to create that directory (e.g. your Home directory or directory where you usually save your work)\n\nRStudio should now refresh itself. You can now download the data required for the workshop by copying and pasting the following into the R console (as shown in the screenshot)\n\ndownload.file(\"https://github.com/sheffield-bioinformatics-core/r-online/raw/master/CourseData.zip\", destfile = \"CourseData.zip\")\n\n The files from the zip file can be extracted using the command:-\n\nunzip(\"CourseData.zip\")\n\nYour RStudio screen should look like:-\n\nYou will need to install some R packages and download some data before you start. You can install the packages by copying and pasting the following into an R console and pressing ENTER\n\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"readr\")\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"tidyr\")\n\nYou can check that this worked by copying and pasting the following:-\n\nsource(\"https://raw.githubusercontent.com/sheffield-bioinformatics-core/r-online/master/check_packages.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nThe dplyr package has been installed\n\n\nThe ggplot2 package has been installed\n\n\nThe readr package has been installed\n\n\nThe rmarkdown package has been installed\n\n\nThe tidyr package has been installed\n\n\nYou have successfully installed all the packages required for the course\n\n\nIf you want to follow along with the R code on this webpage, you can open the file part1.Rmd from the bottom-right corner of RStudio\n\nThere are equivalent markdown files (part2.Rmd, part3.Rmd) for the other sections of the course. Enjoy!"
  },
  {
    "objectID": "training.html",
    "href": "training.html",
    "title": "Training Materials",
    "section": "",
    "text": "Introduction to R - Part 1\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R - Part 2\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R - Part 3\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to RNA-Seq - Part 1\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "training/r_part2/index.html",
    "href": "training/r_part2/index.html",
    "title": "Introduction to R - Part 2",
    "section": "",
    "text": "Starting to play with data with the dplyr and ggplot2 packages\n\n\n\nChoosing which columns to show from the data\nChoosing what rows to keep in the data\nAdding / altering columns\nSorting the rows in our data\nIntroduction to plotting"
  },
  {
    "objectID": "training/bulk-rnaseq_1/index.html",
    "href": "training/bulk-rnaseq_1/index.html",
    "title": "Introduction to RNA-Seq - Part 1",
    "section": "",
    "text": "Coming Soon…."
  },
  {
    "objectID": "training/r_part1/index.html",
    "href": "training/r_part1/index.html",
    "title": "Introduction to R - Part 1",
    "section": "",
    "text": "In these materials, we explore fundamental operations of R and load some example data\n\n\n\n\nBasic calculations in R\nUsing functions\nGetting help\nSaving data using variables\nReading a spreadsheet into R"
  },
  {
    "objectID": "training/r_part3/index.html",
    "href": "training/r_part3/index.html",
    "title": "Introduction to R - Part 3",
    "section": "",
    "text": "Coming Soon…."
  },
  {
    "objectID": "training/r_part1/index.html#topics-covered",
    "href": "training/r_part1/index.html#topics-covered",
    "title": "Introduction to R - Part 1",
    "section": "",
    "text": "Basic calculations in R\nUsing functions\nGetting help\nSaving data using variables\nReading a spreadsheet into R"
  },
  {
    "objectID": "training/r_part1/index.html#variables",
    "href": "training/r_part1/index.html#variables",
    "title": "Introduction to R - Part 1",
    "section": "Variables",
    "text": "Variables\nA variable is a letter or word which takes (or contains) a value. We use the assignment ‘operator’, &lt;- to create a variable and store some value in it.\n\nx &lt;- 10\nx\n\n[1] 10\n\nmyNumber &lt;- 25\nmyNumber\n\n[1] 25\n\n\nWe also can perform arithmetic on variables using functions:\n\nsqrt(myNumber)\n\n[1] 5\n\n\nWe can add variables together:\n\nx + myNumber\n\n[1] 35\n\n\nWe can change the value of an existing variable:\n\nx &lt;- 21\nx\n\n[1] 21\n\n\nWe can set one variable to equal the value of another variable:\n\nx &lt;- myNumber\nx\n\n[1] 25\n\n\nWhen we are feeling lazy we might give our variables short names (x, y, i…etc), but a better practice would be to give them meaningful names. There are some restrictions on creating variable names. They cannot start with a number or contain characters such as . and ‘-’. Naming variables the same as in-built functions in R, such as c, T, mean should also be avoided.\nNaming variables is a matter of taste. Some conventions exist such as a separating words with - or using camelCaps. Whatever convention you decided, stick with it!"
  },
  {
    "objectID": "training/r_part1/index.html#functions",
    "href": "training/r_part1/index.html#functions",
    "title": "Introduction to R - Part 1",
    "section": "Functions",
    "text": "Functions\nFunctions in R perform operations on arguments (the inputs(s) to the function). We have already used:\n\nsin(x)\n\n[1] -0.1323518\n\n\nthis returns the sine of x. In this case the function has one argument: x. Arguments are always contained in parentheses – curved brackets, () – separated by commas.\nArguments can be named or unnamed, but if they are unnamed they must be ordered (we will see later how to find the right order). The names of the arguments are determined by the author of the function and can be found in the help page for the function. When testing code, it is easier and safer to name the arguments. seq is a function for generating a numeric sequence from and to particular numbers. Type ?seq to get the help page for this function.\n\nseq(from = 3, to = 20, by = 4)\n\n[1]  3  7 11 15 19\n\nseq(3, 20, 4)\n\n[1]  3  7 11 15 19\n\n\nArguments can have default values, meaning we do not need to specify values for these in order to run the function.\nrnorm is a function that will generate a series of values from a normal distribution. In order to use the function, we need to tell R how many values we want\n\n## this will produce a random set of numbers, so everyone will get a different set of numbers\nrnorm(n=10)\n\n [1]  1.3974328 -0.6435366  0.2333985  1.2793997  0.2277823  1.0784795\n [7] -0.7050326 -0.3986261 -1.0050956 -2.6169483\n\n\nThe normal distribution is defined by a mean (average) and standard deviation (spread). However, in the above example we didn’t tell R what mean and standard deviation we wanted. So how does R know what to do? All arguments to a function and their default values are listed in the help page\n(N.B sometimes help pages can describe more than one function)\n\n?rnorm\n\nstarting httpd help server ... done\n\n\nIn this case, we see that the defaults for mean and standard deviation are 0 and 1. We can change the function to generate values from a distribution with a different mean and standard deviation using the mean and sd arguments. It is important that we get the spelling of these arguments exactly right, otherwise R will an error message, or (worse?) do something unexpected.\n\nrnorm(n=10, mean=2,sd=3)\n\n [1]  1.617331  4.411613  5.104289  2.413659  2.496108 -2.289431  3.520151\n [8]  3.825499 -1.188939  8.238936\n\nrnorm(10, 2, 3)\n\n [1]  3.39138760  2.73427436  0.06552384 -1.55491237  0.59404355  3.62693180\n [7]  9.06069576 -6.03181933  2.81192684  2.02474254\n\n\nIn the examples above, seq and rnorm were both outputting a series of numbers, which is called a vector in R and is the most-fundamental data-type.\nJust as we can save single numbers as a variable, we can also save a vector. In fact a single number is still a vector.\n\nmy_seq &lt;- seq(from = 3, to = 20, by = 4)\n\nThe arithmetic operations we have seen can be applied to these vectors; exactly the same as a single number.\n\nmy_seq + 2\n\n[1]  5  9 13 17 21\n\n\n\nmy_seq * 2\n\n[1]  6 14 22 30 38\n\n\n\n\n\n\nExercise\n\n\nWhat is the value of pi to 3 decimal places?\n\nsee the help for round ?round\n\nHow can we a create a sequence from 2 to 20 comprised of 5 equally-spaced numbers?\n\ni.e. not specifying the by argument and getting R to work-out the intervals\ncheck the help page for seq ?seq\n\nCreate a variable containing 1000 random numbers with a mean of 2 and a standard deviation of 3\n\nwhat is the maximum and minimum of these numbers?\nwhat is the average?\nHINT: see the help pages for functions min, max and mean\n\n\n\n\n\n\n::: {.callout-tip, collapse = TRUE} ## Solutions\n\n## The digits argument needs to be changed\nround(pi,digits = 3)\n\n[1] 3.142\n\n## Use the length.out argument\nseq(from = 2, to = 20, length.out = 5)\n\n[1]  2.0  6.5 11.0 15.5 20.0\n\n## Make sure you create a variable\n\nmy_numbers &lt;- rnorm(n = 1000, mean = 2, sd = 3)\n\nmax(my_numbers)\n\n[1] 10.79935\n\nmin(my_numbers)\n\n[1] -8.735934\n\nmean(my_numbers)\n\n[1] 2.074108\n\n\n:::\n\n\n\n\n\n\nAbout random numbers…\n\n\n\nSometimes we just want to create some numbers or data that we can play around with. However, most likely we will be concerned about the reproducibility of our R code. In circumstances where randomness is involved it is common to set a “seed” which ensures the same random numbers are generated each time.\n\nset.seed(123)\nrnorm(10)\n\n [1] -0.56047565 -0.23017749  1.55870831  0.07050839  0.12928774  1.71506499\n [7]  0.46091621 -1.26506123 -0.68685285 -0.44566197"
  },
  {
    "objectID": "training/r_part1/index.html#saving-your-notebook",
    "href": "training/r_part1/index.html#saving-your-notebook",
    "title": "Introduction to R - Part 1",
    "section": "Saving your notebook",
    "text": "Saving your notebook\nIf you want to re-visit your code at any point, you will need to save a copy.\n\nFile &gt; Save &gt;"
  },
  {
    "objectID": "training/r_part1/index.html#packages-in-r",
    "href": "training/r_part1/index.html#packages-in-r",
    "title": "Introduction to R - Part 1",
    "section": "Packages in R",
    "text": "Packages in R\nSo far we have used functions that are available with the base distribution of R; the functions you get with a clean install of R. The open-source nature of R encourages others to write their own functions for their particular data-type or analyses.\nPackages are distributed through repositories. The most-common ones are CRAN and Bioconductor. CRAN alone has many thousands of packages.\n\n\nThe meta cran website can be used to browse packages available in CRAN\nBioconductor packages can be browsed here\n\n\nCRAN and Bioconductor have some level of curation so should be the first place to look. Researchers sometimes make their packages available on github. However, there is no straightforward way of searching github for a particular package and no guarentee of quality.\nThe Packages tab in the bottom-right panel of RStudio lists all packages that you currently have installed. Clicking on a package name will show a list of functions that available once that package has been loaded.\nThere are functions for installing packages within R. If your package is part of the main CRAN repository, you can use install.packages.\nWe will be using a set of tidyverse R packages in this practical. To install them, we would do.\n\n## You should already have installed these as part of the course setup\n\ninstall.packages(\"readr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")\n# to install the entire set of tidyverse packages, we can do install.packages(\"tidyverse\"). But this will take some time\n\nA package may have several dependencies; other R packages from which it uses functions or data types (re-using code from other packages is strongly-encouraged). If this is the case, the other R packages will be located and installed too.\nSo long as you stick with the same version of R, you won’t need to repeat this install process.\nOnce a package is installed, the library function is used to load a package and make it’s functions / data available in your current R session. You need to do this every time you load a new RStudio session. Let’s go ahead and load the readr so we can import some data.\n\n## readr is a packages to import spreadsheets into R\nlibrary(readr)"
  },
  {
    "objectID": "training/r_part1/index.html#reading-in-data",
    "href": "training/r_part1/index.html#reading-in-data",
    "title": "Introduction to R - Part 1",
    "section": "Reading in data",
    "text": "Reading in data\nAny .csv file can be imported into R by supplying the path to the file to readr function read_csv and assigning it to a new object to store the result. A useful sanity check is the file.exists function which will print TRUE is the file can be found in the working directory.\n\ngetwd()\n\n[1] \"C:/work/personal_development/markdunning.github.com/training/r_part1\"\n\ngapminder_path &lt;- \"raw_data/gapminder.csv\"\nfile.exists(gapminder_path)\n\n[1] TRUE\n\n\nAssuming the file can be found, we can use read_csv to import. Other functions can be used to read tab-delimited files (read_delim) or a generic read.table function. A data frame object is created.\n\nlibrary(readr)\ngapminder_path &lt;- \"raw_data/gapminder.csv\"\ngapminder &lt;- read_csv(gapminder_path)\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nPay Attention\n\n\n\nWhy would specifying gapminder_path as  Users/mark/Documents/workflows/workshops/r-crash-course/raw_data/gapminder.csv be a bad idea? Would you be able to re-run the analysis on another machine?\n\n\n\n\n\n\n\n\nReading from Excel (xls/xlsx) files\n\n\n\nYou can also read excel (.xls or .xlsx) files into R, but you will have to use the readxl package instead.\n\ninstall.packages(\"readxl\")\nlibrary(readxl)\n## Replace PATH_TO_MY_XLS with the name of the file you want to read\ndata &lt;- read_xls(PATH_TO_MY_XLS)\n## Replace PATH_TO_MY_XLSX with the name of the file you want to read\ndata &lt;- read_xlsx(PATH_TO_MY_XLSX)\n\n\n\n\n\n\n\n\n\nIf you get really stuck importing data, there is a File -&gt; Import Dataset option that should guide you through the process. It will also show the corresponding R code that you can use in future.\n\n\n\nThe data frame object in R allows us to work with “tabular” data, like we might be used to dealing with in Excel, where our data can be thought of having rows and columns. The values in each column have to all be of the same type (i.e. all numbers or all text).\nIn Rstudio, you can view the contents of the data frame we have just created using function View(). This is useful for interactive exploration of the data, but not so useful for automation, scripting and analyses.\n\n## Make sure that you use a capital letter V\n\nView(gapminder)\n\n\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nWe should always check the data frame that we have created. Sometimes R will happily read data using an inappropriate function and create an object without raising an error. However, the data might be unusable. Consider:-\n\ntest &lt;- read_table(gapminder_path)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  `\"country\",\"continent\",\"year\",\"lifeExp\",\"pop\",\"gdpPercap\"` = col_character()\n)\n\n\nWarning: 324 parsing failures.\nrow col  expected    actual                     file\n145  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n146  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n147  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n148  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n149  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n... ... ......... ......... ........................\nSee problems(...) for more details.\n\n\n\nView(test)\n\n\n\n# A tibble: 1,704 × 1\n   `\"country\",\"continent\",\"year\",\"lifeExp\",\"pop\",\"gdpPercap\"` \n   &lt;chr&gt;                                                      \n 1 \"\\\"Afghanistan\\\",\\\"Asia\\\",1952,28.801,8425333,779.4453145\" \n 2 \"\\\"Afghanistan\\\",\\\"Asia\\\",1957,30.332,9240934,820.8530296\" \n 3 \"\\\"Afghanistan\\\",\\\"Asia\\\",1962,31.997,10267083,853.10071\"  \n 4 \"\\\"Afghanistan\\\",\\\"Asia\\\",1967,34.02,11537966,836.1971382\" \n 5 \"\\\"Afghanistan\\\",\\\"Asia\\\",1972,36.088,13079460,739.9811058\"\n 6 \"\\\"Afghanistan\\\",\\\"Asia\\\",1977,38.438,14880372,786.11336\"  \n 7 \"\\\"Afghanistan\\\",\\\"Asia\\\",1982,39.854,12881816,978.0114388\"\n 8 \"\\\"Afghanistan\\\",\\\"Asia\\\",1987,40.822,13867957,852.3959448\"\n 9 \"\\\"Afghanistan\\\",\\\"Asia\\\",1992,41.674,16317921,649.3413952\"\n10 \"\\\"Afghanistan\\\",\\\"Asia\\\",1997,41.763,22227415,635.341351\" \n# ℹ 1,694 more rows\n\n\nQuick sanity checks can also be performed by inspecting details in the environment tab. A useful check in RStudio is to use the head function, which prints the first 6 rows of the data frame to the screen.\n\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\nWe have used a nice, clean, dataset as our example for the workshop. Other datasets out in the wild might not be so ameanable for analysis in R. If your data look like this, you might have problems:- \nWe recommend the Data Carpentry materials on spreadsheet organisation for an overview of common pitfalls - and how to address them\n\nhttps://datacarpentry.org/spreadsheet-ecology-lesson/"
  },
  {
    "objectID": "training/r_part1/index.html#accessing-data-in-columns",
    "href": "training/r_part1/index.html#accessing-data-in-columns",
    "title": "Introduction to R - Part 1",
    "section": "Accessing data in columns",
    "text": "Accessing data in columns\nIn the next section we will explore in more detail how to control the columns and rows from a data frame that are displayed in RStudio. For now, accessing all the observations from a particular column can be achieved by typing the $ symbol after the name of the data frame followed by the name of a column you are interested in.\nRStudio is able to “tab-complete” the column name, so typing the following and pressing the TAB key will bring-up a list of possible columns. The contents of the column that you select are then printed to the screen.\n\ngapminder$c\n\nRather than merely printing to the screen we can also create a variable\n\nyears &lt;- gapminder$year\n\nWe can then use some of the functions we have seen before\n\nmin(years)\n\n[1] 1952\n\nmax(years)\n\n[1] 2007\n\nmedian(years)\n\n[1] 1979.5\n\n\nAlthough we don’t have to save the values in the column as a variable first\n\nmin(gapminder$year)\n\n[1] 1952"
  },
  {
    "objectID": "training/r_part1/index.html#creating-a-new-r-notebook",
    "href": "training/r_part1/index.html#creating-a-new-r-notebook",
    "title": "Introduction to R - Part 1",
    "section": "Creating a new R notebook",
    "text": "Creating a new R notebook\nYou will probably want to create a new R notebook file to perform your analysis. This can be done by following the menus:-\n\nFile -&gt; New File -&gt; R notebook\n\nA new pane should open that includes some example code. You can delete everything apart from lines 1 to 4\n\nYou can now insert R code chunks using the insert menu.\nBefore generating a report you will need to save the file with the menu File -&gt; Save. You will then be able to create a report using the Preview button. N.B. you may need to install extra software before doing this.\n\n\n\n\nExercise before the next session\n\n\nCreate a new R notebook using the instructions above and create a code chunk to read the gapminder.csv file. Answer the following questions and generate a report\n\nThe function tail is similar to head except it prints the last lines in a file. Use this function to print the last 10 lines in the data frame (you will have to consult the help on tail to see how to change the default arguments.)\nWhat is the largest observed population?\nWhat is the lowest life expectancy"
  },
  {
    "objectID": "training/r_part2/index.html#topics-covered",
    "href": "training/r_part2/index.html#topics-covered",
    "title": "Introduction to R - Part 2",
    "section": "",
    "text": "Choosing which columns to show from the data\nChoosing what rows to keep in the data\nAdding / altering columns\nSorting the rows in our data\nIntroduction to plotting"
  },
  {
    "objectID": "training/r_part2/index.html#manipulating-columns",
    "href": "training/r_part2/index.html#manipulating-columns",
    "title": "Introduction to R - Part 2",
    "section": "Manipulating Columns",
    "text": "Manipulating Columns\nWe are going to use functions from the dplyr package to manipulate the data frame we have just created. It is perfectly possible to work with data frames using the functions provided as part of “base R”. However, many find it easy to read and write code using dplyr.\nThere are many more functions available in dplyr than we will cover today. An overview of all functions is given in a cheatsheet.\n::: {.callout-tip, collapse = TRUE}"
  },
  {
    "objectID": "training/r_part2/index.html#restricting-rows-with-filter",
    "href": "training/r_part2/index.html#restricting-rows-with-filter",
    "title": "Introduction to R - Part 2",
    "section": "Restricting rows with filter",
    "text": "Restricting rows with filter\nSo far we have been returning all the rows in the output. We can use what we call a logical test to filter the rows in a data frame. This logical test will be applied to each row and give either a TRUE or FALSE result. When filtering, only rows with a TRUE result get returned.\nFor example we filter for rows where the lifeExp variable is less than 40.\n\nfilter(gapminder, lifeExp &lt; 40)\n\n# A tibble: 124 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Angola      Africa     1952    30.0  4232095     3521.\n 9 Angola      Africa     1957    32.0  4561361     3828.\n10 Angola      Africa     1962    34    4826015     4269.\n# ℹ 114 more rows\n\n\nInternally, R creates a vector of TRUE or FALSE; one for each row in the data frame. This is then used to decide which rows to display.\nTesting for equality can be done using ==. This will only give TRUE for entries that are exactly the same as the test string.\n\nfilter(gapminder, country == \"Zambia\")\n\n# A tibble: 12 × 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Zambia  Africa     1952    42.0  2672000     1147.\n 2 Zambia  Africa     1957    44.1  3016000     1312.\n 3 Zambia  Africa     1962    46.0  3421000     1453.\n 4 Zambia  Africa     1967    47.8  3900000     1777.\n 5 Zambia  Africa     1972    50.1  4506497     1773.\n 6 Zambia  Africa     1977    51.4  5216550     1589.\n 7 Zambia  Africa     1982    51.8  6100407     1409.\n 8 Zambia  Africa     1987    50.8  7272406     1213.\n 9 Zambia  Africa     1992    46.1  8381163     1211.\n10 Zambia  Africa     1997    40.2  9417789     1071.\n11 Zambia  Africa     2002    39.2 10595811     1072.\n12 Zambia  Africa     2007    42.4 11746035     1271.\n\n\nN.B. For partial matches, the grepl function and / or regular expressions (if you know them) can be used.\n\nfilter(gapminder, grepl(\"land\", country))\n\n# A tibble: 108 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Finland Europe     1952    66.6 4090500     6425.\n 2 Finland Europe     1957    67.5 4324000     7545.\n 3 Finland Europe     1962    68.8 4491443     9372.\n 4 Finland Europe     1967    69.8 4605744    10922.\n 5 Finland Europe     1972    70.9 4639657    14359.\n 6 Finland Europe     1977    72.5 4738902    15605.\n 7 Finland Europe     1982    74.6 4826933    18533.\n 8 Finland Europe     1987    74.8 4931729    21141.\n 9 Finland Europe     1992    75.7 5041039    20647.\n10 Finland Europe     1997    77.1 5134406    23724.\n# ℹ 98 more rows\n\n\nWe can also test if rows are not equal to a value using !=\n\nfilter(gapminder, continent != \"Europe\")\n\n# A tibble: 1,344 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,334 more rows\n\n\n\ntesting more than one condition\nThere are a couple of ways of testing for more than one pattern. The first uses an or | statement. i.e. testing if the value of country is Zambia or the value is Zimbabwe. Remember to use double = sign to test for string equality; ==.\n\nfilter(gapminder, country == \"Zambia\" | country == \"Zimbabwe\")\n\n# A tibble: 24 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Zambia  Africa     1952    42.0 2672000     1147.\n 2 Zambia  Africa     1957    44.1 3016000     1312.\n 3 Zambia  Africa     1962    46.0 3421000     1453.\n 4 Zambia  Africa     1967    47.8 3900000     1777.\n 5 Zambia  Africa     1972    50.1 4506497     1773.\n 6 Zambia  Africa     1977    51.4 5216550     1589.\n 7 Zambia  Africa     1982    51.8 6100407     1409.\n 8 Zambia  Africa     1987    50.8 7272406     1213.\n 9 Zambia  Africa     1992    46.1 8381163     1211.\n10 Zambia  Africa     1997    40.2 9417789     1071.\n# ℹ 14 more rows\n\n\nThe %in% function is a convenient function for testing which items in a vector correspond to a defined set of values.\n\nfilter(gapminder, country %in% c(\"Zambia\", \"Zimbabwe\"))\n\n# A tibble: 24 × 6\n   country continent  year lifeExp     pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Zambia  Africa     1952    42.0 2672000     1147.\n 2 Zambia  Africa     1957    44.1 3016000     1312.\n 3 Zambia  Africa     1962    46.0 3421000     1453.\n 4 Zambia  Africa     1967    47.8 3900000     1777.\n 5 Zambia  Africa     1972    50.1 4506497     1773.\n 6 Zambia  Africa     1977    51.4 5216550     1589.\n 7 Zambia  Africa     1982    51.8 6100407     1409.\n 8 Zambia  Africa     1987    50.8 7272406     1213.\n 9 Zambia  Africa     1992    46.1 8381163     1211.\n10 Zambia  Africa     1997    40.2 9417789     1071.\n# ℹ 14 more rows\n\n\nWe can require that both tests are TRUE, e.g. which years in Zambia had a life expectancy less than 40, by separating conditional statements by a ,. This performs an AND test so only rows that meet both conditions are returned.\n\nfilter(gapminder, country == \"Zambia\", lifeExp &lt; 40)\n\n# A tibble: 1 × 6\n  country continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Zambia  Africa     2002    39.2 10595811     1072.\n\n\n\nYou may have noticed that filter will always output the same number of columns as the input data frame. filter never changes the columns that are displayed. There are ways of using filter in conjunction with select as we will see later."
  },
  {
    "objectID": "training/r_part2/index.html#exercise",
    "href": "training/r_part2/index.html#exercise",
    "title": "Introduction to R - Part 2",
    "section": "Exercise",
    "text": "Exercise\n\n\nCreate a subset of the data where the population less than a million in the year 2002\nCreate a subset of the data where the life expectancy is greater than 75 in the years prior to 1987\nCreate a subset of the European data where the life expectancy is between 75 and 80 in the years 2002 or 2007.\nIf you are finished with these, try to explore alternative ways of performing the same filtering"
  },
  {
    "objectID": "training/r_part2/index.html#manipulating-the-values-in-a-column-creating-new-columns",
    "href": "training/r_part2/index.html#manipulating-the-values-in-a-column-creating-new-columns",
    "title": "Introduction to R - Part 2",
    "section": "Manipulating the values in a column / creating new columns",
    "text": "Manipulating the values in a column / creating new columns\nAs well as selecting existing columns in the data frame, new columns can be created and existing ones manipulated using the mutate function. Typically a function or mathematical expression is applied to data in existing columns by row, and the result either stored in a new column or reassigned to an existing one. In other words, the number of values returned by the function must be the same as the number of input values. Multiple mutations can be performed in one line of code.\nHere, we create a new column of population in millions (PopInMillions) and round lifeExp to the nearest integer.\n\nmutate(gapminder, PopInMillions = pop / 1e6,\n       lifeExp = round(lifeExp))\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap PopInMillions\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n 1 Afghanistan Asia       1952      29  8425333      779.          8.43\n 2 Afghanistan Asia       1957      30  9240934      821.          9.24\n 3 Afghanistan Asia       1962      32 10267083      853.         10.3 \n 4 Afghanistan Asia       1967      34 11537966      836.         11.5 \n 5 Afghanistan Asia       1972      36 13079460      740.         13.1 \n 6 Afghanistan Asia       1977      38 14880372      786.         14.9 \n 7 Afghanistan Asia       1982      40 12881816      978.         12.9 \n 8 Afghanistan Asia       1987      41 13867957      852.         13.9 \n 9 Afghanistan Asia       1992      42 16317921      649.         16.3 \n10 Afghanistan Asia       1997      42 22227415      635.         22.2 \n# ℹ 1,694 more rows\n\n\nNote that we haven’t actually changed our gapminder data frame. If we wanted to make the new columns permanent, we would have to create a new variable.\nIf we want to rename existing columns, and not create any extra columns, we can use the rename function.\n\nrename(gapminder, GDP=gdpPercap)\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop   GDP\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333  779.\n 2 Afghanistan Asia       1957    30.3  9240934  821.\n 3 Afghanistan Asia       1962    32.0 10267083  853.\n 4 Afghanistan Asia       1967    34.0 11537966  836.\n 5 Afghanistan Asia       1972    36.1 13079460  740.\n 6 Afghanistan Asia       1977    38.4 14880372  786.\n 7 Afghanistan Asia       1982    39.9 12881816  978.\n 8 Afghanistan Asia       1987    40.8 13867957  852.\n 9 Afghanistan Asia       1992    41.7 16317921  649.\n10 Afghanistan Asia       1997    41.8 22227415  635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "training/r_part2/index.html#ordering-sorting",
    "href": "training/r_part2/index.html#ordering-sorting",
    "title": "Introduction to R - Part 2",
    "section": "Ordering / sorting",
    "text": "Ordering / sorting\nThe whole data frame can be re-ordered according to the values in one column using the arrange function. So to order the table according to population size:-\n\narrange(gapminder, pop)\n\n# A tibble: 1,704 × 6\n   country               continent  year lifeExp   pop gdpPercap\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 Sao Tome and Principe Africa     1952    46.5 60011      880.\n 2 Sao Tome and Principe Africa     1957    48.9 61325      861.\n 3 Djibouti              Africa     1952    34.8 63149     2670.\n 4 Sao Tome and Principe Africa     1962    51.9 65345     1072.\n 5 Sao Tome and Principe Africa     1967    54.4 70787     1385.\n 6 Djibouti              Africa     1957    37.3 71851     2865.\n 7 Sao Tome and Principe Africa     1972    56.5 76595     1533.\n 8 Sao Tome and Principe Africa     1977    58.6 86796     1738.\n 9 Djibouti              Africa     1962    39.7 89898     3021.\n10 Sao Tome and Principe Africa     1982    60.4 98593     1890.\n# ℹ 1,694 more rows\n\n\nThe default is smallest --&gt; largest but we can change this using the desc function\n\narrange(gapminder, desc(pop))\n\n# A tibble: 1,704 × 6\n   country continent  year lifeExp        pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 China   Asia       2007    73.0 1318683096     4959.\n 2 China   Asia       2002    72.0 1280400000     3119.\n 3 China   Asia       1997    70.4 1230075000     2289.\n 4 China   Asia       1992    68.7 1164970000     1656.\n 5 India   Asia       2007    64.7 1110396331     2452.\n 6 China   Asia       1987    67.3 1084035000     1379.\n 7 India   Asia       2002    62.9 1034172547     1747.\n 8 China   Asia       1982    65.5 1000281000      962.\n 9 India   Asia       1997    61.8  959000000     1459.\n10 China   Asia       1977    64.0  943455000      741.\n# ℹ 1,694 more rows\n\n\narrange also works on character vectors, arrange them alpha-numerically.\n\narrange(gapminder, desc(country))\n\n# A tibble: 1,704 × 6\n   country  continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Zimbabwe Africa     1952    48.5  3080907      407.\n 2 Zimbabwe Africa     1957    50.5  3646340      519.\n 3 Zimbabwe Africa     1962    52.4  4277736      527.\n 4 Zimbabwe Africa     1967    54.0  4995432      570.\n 5 Zimbabwe Africa     1972    55.6  5861135      799.\n 6 Zimbabwe Africa     1977    57.7  6642107      686.\n 7 Zimbabwe Africa     1982    60.4  7636524      789.\n 8 Zimbabwe Africa     1987    62.4  9216418      706.\n 9 Zimbabwe Africa     1992    60.4 10704340      693.\n10 Zimbabwe Africa     1997    46.8 11404948      792.\n# ℹ 1,694 more rows\n\n\nWe can even order by more than one condition\n\narrange(gapminder, year, pop)\n\n# A tibble: 1,704 × 6\n   country               continent  year lifeExp    pop gdpPercap\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 Sao Tome and Principe Africa     1952    46.5  60011      880.\n 2 Djibouti              Africa     1952    34.8  63149     2670.\n 3 Bahrain               Asia       1952    50.9 120447     9867.\n 4 Iceland               Europe     1952    72.5 147962     7268.\n 5 Comoros               Africa     1952    40.7 153936     1103.\n 6 Kuwait                Asia       1952    55.6 160000   108382.\n 7 Equatorial Guinea     Africa     1952    34.5 216964      376.\n 8 Reunion               Africa     1952    52.7 257700     2719.\n 9 Gambia                Africa     1952    30   284320      485.\n10 Swaziland             Africa     1952    41.4 290243     1148.\n# ℹ 1,694 more rows\n\n\n\narrange(gapminder, year, continent, pop)\n\n# A tibble: 1,704 × 6\n   country               continent  year lifeExp    pop gdpPercap\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 Sao Tome and Principe Africa     1952    46.5  60011      880.\n 2 Djibouti              Africa     1952    34.8  63149     2670.\n 3 Comoros               Africa     1952    40.7 153936     1103.\n 4 Equatorial Guinea     Africa     1952    34.5 216964      376.\n 5 Reunion               Africa     1952    52.7 257700     2719.\n 6 Gambia                Africa     1952    30   284320      485.\n 7 Swaziland             Africa     1952    41.4 290243     1148.\n 8 Gabon                 Africa     1952    37.0 420702     4293.\n 9 Botswana              Africa     1952    47.6 442308      851.\n10 Namibia               Africa     1952    41.7 485831     2424.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "training/r_part2/index.html#saving-data-frames",
    "href": "training/r_part2/index.html#saving-data-frames",
    "title": "Introduction to R - Part 2",
    "section": "Saving data frames",
    "text": "Saving data frames\nA final point on data frames is that we can write them to disk once we have done our data processing.\nLet’s create a folder in which to store such processed, analysis ready data\n\ndir.create(\"out_data\",showWarnings = FALSE)\n## showWarnings will stop a message from appearing if the directory already exists\n\n\nbyWealth &lt;- arrange(gapminder, desc(gdpPercap))\n# check the output before writing\nhead(byWealth)\n\n# A tibble: 6 × 6\n  country continent  year lifeExp     pop gdpPercap\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Kuwait  Asia       1957    58.0  212846   113523.\n2 Kuwait  Asia       1972    67.7  841934   109348.\n3 Kuwait  Asia       1952    55.6  160000   108382.\n4 Kuwait  Asia       1962    60.5  358266    95458.\n5 Kuwait  Asia       1967    64.6  575003    80895.\n6 Kuwait  Asia       1977    69.3 1140357    59265.\n\nwrite_csv(byWealth, file = \"out_data/by_wealth.csv\")\n\nWe will now try an exercise that involves using several steps of these operations"
  },
  {
    "objectID": "training/r_part2/index.html#exercise-1",
    "href": "training/r_part2/index.html#exercise-1",
    "title": "Introduction to R - Part 2",
    "section": "Exercise",
    "text": "Exercise\n\n\nFilter the data to include just observations from the year 2002\nRe-arrange the table so that the countries from each continent are ordered according to decreasing wealth. i.e. the wealthiest countries first\nSelect all the columns apart from year\nWrite the data frame out to a file in out_data/ folder"
  },
  {
    "objectID": "training/r_part2/index.html#piping",
    "href": "training/r_part2/index.html#piping",
    "title": "Introduction to R - Part 2",
    "section": "“Piping”",
    "text": "“Piping”\nAs have have just seen, we will often need to perform an analysis, or clean a dataset, using several dplyr functions in sequence. e.g. filtering, mutating, then selecting columns of interest (possibly followed by plotting - see shortly).\nAs a small example; if we wanted to filter our results to just Europe the continent column becomes redundant so we might as well remove it.\nThe following is perfectly valid R code, but invites the user to make mistakes and copy-and-paste erros when writing it. We also have to create multiple copies of the same data frame.\n\ntmp &lt;- filter(gapminder, continent == \"Europe\")\ntmp2 &lt;- select(tmp, -continent)\ntmp2\n\n# A tibble: 360 × 5\n   country  year lifeExp     pop gdpPercap\n   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Albania  1952    55.2 1282697     1601.\n 2 Albania  1957    59.3 1476505     1942.\n 3 Albania  1962    64.8 1728137     2313.\n 4 Albania  1967    66.2 1984060     2760.\n 5 Albania  1972    67.7 2263554     3313.\n 6 Albania  1977    68.9 2509048     3533.\n 7 Albania  1982    70.4 2780097     3631.\n 8 Albania  1987    72   3075321     3739.\n 9 Albania  1992    71.6 3326498     2497.\n10 Albania  1997    73.0 3428038     3193.\n# ℹ 350 more rows\n\n\n(Those familiar with Unix may recall that commands can be joined with a pipe; |)\nIn R, dplyr commands to be linked together and form a workflow. The symbol %&gt;% is pronounced then. With a %&gt;% the input to a function is assumed to be the output of the previous line. All the dplyr functions that we have seen so far take a data frame as an input and return an altered data frame as an output, so are amenable to this type of programming.\nThe example we gave of filtering just the European countries and removing the continent column becomes:-\n\nfilter(gapminder, continent==\"Europe\") %&gt;% \n  select(-continent)\n\n# A tibble: 360 × 5\n   country  year lifeExp     pop gdpPercap\n   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 Albania  1952    55.2 1282697     1601.\n 2 Albania  1957    59.3 1476505     1942.\n 3 Albania  1962    64.8 1728137     2313.\n 4 Albania  1967    66.2 1984060     2760.\n 5 Albania  1972    67.7 2263554     3313.\n 6 Albania  1977    68.9 2509048     3533.\n 7 Albania  1982    70.4 2780097     3631.\n 8 Albania  1987    72   3075321     3739.\n 9 Albania  1992    71.6 3326498     2497.\n10 Albania  1997    73.0 3428038     3193.\n# ℹ 350 more rows\n\n\n\n\n\n\nExercise\n\n\nRe-write your solution to the previous exercise, but using the %&gt;% symbol"
  },
  {
    "objectID": "training/r_part2/index.html#why-use-ggplot2",
    "href": "training/r_part2/index.html#why-use-ggplot2",
    "title": "Introduction to R - Part 2",
    "section": "Why use ggplot2?",
    "text": "Why use ggplot2?\nThe structured syntax and high level of abstraction used by ggplot2 should allow for the user to concentrate on the visualisations instead of creating the underlying code.\nOn top of this central philosophy ggplot2 has:\n\nIncreased flexibility over many plotting systems.\nAn advanced theme system for professional/publication level graphics.\nLarge developer base – Many libraries extending its flexibility.\nLarge user base – Great documentation and active mailing list.\n\n\nIt is always useful to think about the message you want to convey and the appropriate plot before writing any R code. Resources like data-to-viz.com should help.\n\nWith some practice, ggplot2 makes it easier to go from the figure you are imagining in our head (or on paper) to a publication-ready image in R.\n\nAs with dplyr, we won’t have time to cover all details of ggplot2. This is however a useful cheatsheet that can be printed as a reference. The cheatsheet is also available through the RStudio Help menu."
  },
  {
    "objectID": "training/r_part2/index.html#basic-plot-types",
    "href": "training/r_part2/index.html#basic-plot-types",
    "title": "Introduction to R - Part 2",
    "section": "Basic plot types",
    "text": "Basic plot types\nA plot in ggplot2 is created with the following type of command\nggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) +  &lt;GEOM_FUNCTION&gt;()\nSo we need to specify\n\nThe data to be used in graph\nMappings of data to the graph (aesthetic mapping)\nWhat type of graph we want to use (The geom to use).\n\nLets say that we want to explore the relationship between GDP and Life Expectancy. We might start with the hypothesis that richer countries have higher life expectancy. A sensible choice of plot would be a scatter plot with gdp on the x-axis and life expectancy on the y-axis.\nThe first stage is to specify our dataset\n\nlibrary(ggplot2)\nggplot(data = gapminder)\n\n\n\n\n\n\n\n\nFor the aesthetics, as a bare minimum we will map the gdpPercap and lifeExp to the x- and y-axis of the plot. Some progress is made; we at least get axes\n\nggplot(data = gapminder,aes(x=gdpPercap, y=lifeExp))\n\n\n\n\n\n\n\n\nThat created the axes, but we still need to define how to display our points on the plot. As we have continuous data for both the x- and y-axis, geom_point is a good choice.\n\nggplot(data = gapminder,aes(x=gdpPercap, y=lifeExp)) + geom_point()\n\n\n\n\n\n\n\n\nThe geom we use will depend on what kind of data we have (continuous, categorical etc)\n\ngeom_point() - Scatter plots\ngeom_line() - Line plots\ngeom_smooth() - Fitted line plots\ngeom_bar() - Bar plots\ngeom_boxplot() - Boxplots\ngeom_jitter() - Jitter to plots\ngeom_histogram() - Histogram plots\ngeom_density() - Density plots\ngeom_text() - Text to plots\ngeom_errorbar() - Errorbars to plots\ngeom_violin() - Violin plots\ngeom_tile() - for “heatmap”-like plots\n\nBoxplots are commonly used to visualise the distributions of continuous data. We have to use a categorical variable on the x-axis such as continent or country (not advisable in this case as there are too many different values).\nThe order of the boxes along the x-axis is dictated by the order of categories in the factor; with the default for names being alphabetical order.\n\nggplot(gapminder, aes(x = continent, y=gdpPercap)) + geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(gapminder, aes(x = gdpPercap)) + geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nProducing a barplot of counts only requires an x variable. The counts will be generated by R.\n\nggplot(gapminder, aes(x=continent)) + geom_bar()\n\n\n\n\n\n\n\n\nThe height of the bars can also be mapped directly to numeric variables in the data frame if the geom_col function is used instead.\nIn the below plot the axis labels will be messy and difficult to read. This is something that can be customised with some of the ggplot2 options we will explore later.\n\ngapminder2002 &lt;- filter(gapminder, year==2002,continent==\"Americas\")\nggplot(gapminder2002, aes(x=country,y=gdpPercap)) + geom_col()\n\n\n\n\n\n\n\n\nWhere appropriate, we can add multiple layers of geoms to the plot. For instance, a criticism of the boxplot is that it does not show all the data. We can rectify this by overlaying the individual points.\n\nggplot(gapminder, aes(x = continent, y=gdpPercap)) + geom_boxplot() + geom_point()\n\n\n\n\n\n\n\n\n\nggplot(gapminder, aes(x = continent, y=gdpPercap)) + geom_boxplot() + geom_jitter(width=0.1)\n\n\n\n\n\n\n\n\n\n\n\n\nExercises\n\n\nThe violin plot is a popular alternative to the boxplot. Create a violin plot with geom_violin to visualise the differences in GDP between different continents.\nCreate a subset of the gapminder data frame containing just the rows for your country of birth\nHas there been an increase in life expectancy over time?\n\nvisualise the trend using a scatter plot (geom_point), line graph (geom_line) or smoothed line (geom_smooth).\n\nWhat happens when you modify the geom_boxplot example to compare the gdp distributions for different years?\n\nLook at the message ggplot2 prints above the plot and try to modify the code to give a separate boxplot for each year\n\n\n\n\n\n\nAs we have seen already, ggplot offers an interface to create many popular plot types. It is up to the user to decide what the best way to visualise the data."
  },
  {
    "objectID": "training/r_part2/index.html#customising-the-plot-appearance",
    "href": "training/r_part2/index.html#customising-the-plot-appearance",
    "title": "Introduction to R - Part 2",
    "section": "Customising the plot appearance",
    "text": "Customising the plot appearance\nOur plots are a bit dreary at the moment, but one way to add colour is to add a col argument to the geom_point function. The value can be any of the pre-defined colour names in R. These are displayed in this handy online reference. Red, Green, Blue of Hex values can also be given.\n\nggplot(gapminder, aes(x = gdpPercap, y=lifeExp)) + geom_point(col=\"red\")\n\n\n\n\n\n\n\n\n\n# Use the Hex codes from Farrow and Ball: https://convertingcolors.com/list/farrow-ball.html\n# (cook's blue)\n\nggplot(gapminder, aes(x = gdpPercap, y=lifeExp)) + geom_point(col=\"#6A90B4\")\n\n\n\n\n\n\n\n\nHowever, a powerful feature of ggplot2 is that colours are treated as aesthetics of the plot. In other words we can use a column in our dataset.\nLet’s say that we want points on our plot to be coloured according to continent. We add an extra argument to the definition of aesthetics to define the mapping. ggplot2 will even decide on colours and create a legend for us.\n\nggplot(gapminder, aes(x = gdpPercap, y=lifeExp,col=continent)) + geom_point()\n\n\n\n\n\n\n\n\nIt will even choose a continuous or discrete colour scale based on the data type. We have already seen that ggplot2 is treat our year column as numerical data; which is probably not very useful for visualisation.\n\nggplot(gapminder, aes(x = gdpPercap, y=lifeExp,col=year)) + geom_point()\n\n\n\n\n\n\n\n\nWe can force ggplot2 to treat year as categorical data by using as.factor when creating the aesthetics.\n\nggplot(gapminder, aes(x = gdpPercap, y=lifeExp,col=as.factor(year))) + geom_point()\n\n\n\n\n\n\n\n\nWhen used in the construction of a boxplot, the col argument will change the colour of the lines. To change the colour of the boxes we have to use fill.\n\nggplot(gapminder, aes(x = continent, y=gdpPercap,fill=continent)) + geom_boxplot()"
  },
  {
    "objectID": "training/r_part2/index.html#help-with-dplyr-functions",
    "href": "training/r_part2/index.html#help-with-dplyr-functions",
    "title": "Introduction to R - Part 2",
    "section": "Help with dplyr functions",
    "text": "Help with dplyr functions\n\ndplyr cheatsheet. The cheatsheet is also available through the RStudio Help menu.\n\n:::\nBefore using any of these functions, we need to load the library:-\n\nlibrary(dplyr)\n\n\nselecting columns\nWe can access the columns of a data frame using the select function.\n\nby name\nFirstly, we can select column by name, by adding bare column names (i.e. not requiring quote marks around the name) after the name of the data frame, separated by a , .\n\nselect(gapminder, country, continent)\n\n# A tibble: 1,704 × 2\n   country     continent\n   &lt;chr&gt;       &lt;chr&gt;    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n\n\nWe can also omit columns from the ouput by putting a minus (-) in front of the column name. Note that this is not the same as removing the column from the data permanently.\n\nselect(gapminder, -country)\n\n# A tibble: 1,704 × 5\n   continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Asia       1952    28.8  8425333      779.\n 2 Asia       1957    30.3  9240934      821.\n 3 Asia       1962    32.0 10267083      853.\n 4 Asia       1967    34.0 11537966      836.\n 5 Asia       1972    36.1 13079460      740.\n 6 Asia       1977    38.4 14880372      786.\n 7 Asia       1982    39.9 12881816      978.\n 8 Asia       1987    40.8 13867957      852.\n 9 Asia       1992    41.7 16317921      649.\n10 Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n\nrange of columns\nA range of columns can be selected by the : operator.\n\nselect(gapminder, lifeExp:gdpPercap)\n\n# A tibble: 1,704 × 3\n   lifeExp      pop gdpPercap\n     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1    28.8  8425333      779.\n 2    30.3  9240934      821.\n 3    32.0 10267083      853.\n 4    34.0 11537966      836.\n 5    36.1 13079460      740.\n 6    38.4 14880372      786.\n 7    39.9 12881816      978.\n 8    40.8 13867957      852.\n 9    41.7 16317921      649.\n10    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\n\nhelper functions\nThere are a number of helper functions can be employed if we are unsure about the exact name of the column.\n\nselect(gapminder, starts_with(\"co\"))\n\n# A tibble: 1,704 × 2\n   country     continent\n   &lt;chr&gt;       &lt;chr&gt;    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n\nselect(gapminder, contains(\"life\"))\n\n# A tibble: 1,704 × 1\n   lifeExp\n     &lt;dbl&gt;\n 1    28.8\n 2    30.3\n 3    32.0\n 4    34.0\n 5    36.1\n 6    38.4\n 7    39.9\n 8    40.8\n 9    41.7\n10    41.8\n# ℹ 1,694 more rows\n\n# selecting the last and penultimate columns\nselect(gapminder, last_col(1),last_col())\n\n# A tibble: 1,704 × 2\n        pop gdpPercap\n      &lt;dbl&gt;     &lt;dbl&gt;\n 1  8425333      779.\n 2  9240934      821.\n 3 10267083      853.\n 4 11537966      836.\n 5 13079460      740.\n 6 14880372      786.\n 7 12881816      978.\n 8 13867957      852.\n 9 16317921      649.\n10 22227415      635.\n# ℹ 1,694 more rows\n\n\nIt is also possible to use the column number in the selection.\n\nselect(gapminder, 4:6)\n\n# A tibble: 1,704 × 3\n   lifeExp      pop gdpPercap\n     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1    28.8  8425333      779.\n 2    30.3  9240934      821.\n 3    32.0 10267083      853.\n 4    34.0 11537966      836.\n 5    36.1 13079460      740.\n 6    38.4 14880372      786.\n 7    39.9 12881816      978.\n 8    40.8 13867957      852.\n 9    41.7 16317921      649.\n10    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\n\nQuestion: Why might using the number of the column sometimes be problematic? Consider what might happen if you wrote code to select the last column of data from a file using the column number. What would happen if the number of columns in the file was not constant?\n\nThe select function can be used with just a single column name - in a similar manner to the $ operation we saw last time. However, select always returns a data frame whereas $ gives a vector. Compare the output of the following code chunks\n\nselect(gapminder, pop)\n\n# A tibble: 1,704 × 1\n        pop\n      &lt;dbl&gt;\n 1  8425333\n 2  9240934\n 3 10267083\n 4 11537966\n 5 13079460\n 6 14880372\n 7 12881816\n 8 13867957\n 9 16317921\n10 22227415\n# ℹ 1,694 more rows\n\n\n\ngapminder$pop\n\nThe consequence of this is that you cannot use functions such as mean in combination with select\n\npops &lt;- select(gapminder, pop)\nmean(pops)\n\nIn the next session we will see how to calculate summary statistics on particular columns in our data. For now, a useful function is pull that will return the correct type of data required for a function such as mean.\n\npops &lt;- pull(gapminder,pop)\nmean(pops)\n\n[1] 29601212"
  }
]