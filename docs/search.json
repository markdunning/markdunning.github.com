[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dr. Mark Dunning",
    "section": "",
    "text": "I’m a Bioinformatician with a background in Mathematics and Computer Science with over 20 years of experience. I specialise in the visualisation and interpretation of complex data and have a wealth of experience in making results accessible and easy to interrogate for wet-lab biologists. I also have a track-record in developing and delivering training courses and workships, along with formal teaching.\nI obtained my PhD in the Statistics and Computational Biology group of Simon Tavare at the University of Cambridge. During this time, I developed the beadarray Bioconductor package for the analysis of Illumina microarray data. My PhD thesis is available online, should you be interested.\nAfter my PhD, I worked as a Bioinformatics Analyst within the Bioinformatics Core; consulting on, and assisting in, the analysis on all types of high-throughput datasets. During this time I worked on studies to define subtypes of Breast and Prostate cancer and established pipelines for analysis whole-genome and exome resequencing data.\nI held the role of “Bioinformatics Training Coordinator” in the Bioinformatics Core of Cancer Research Uk Cambridge Institute. I organised, developed and facilitated Bioinformatics training courses to teach computational and analytical skills to wet-lab biologists.\nFrom October 2017 I established the Bioinformatics Core at The University of Sheffield which ran until August 2025. Along with supporting clinicians and researchers across campus, I also contributed to various MSC and undergraduate programs as well as obtaining training / teaching qualifications from thecarpentries and AdvanceHE (FHEA)"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "training/r/index.html",
    "href": "training/r/index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Disclaimer\n\nAlthough R is well-regarded as a tool for performing statistical analysis, this workshop will not explicitly teach stats. Instead we give introduce the tools that we allow you to manipulate and interrogate your data into a form with which you can execute statistical tests.\n\n\n\nSetup\nIf you are following these notes independently (outside one of our workshops)\nFrom the RStudio menus, Choose the File -&gt; New Project option and select New Directory from the new window\n\nThen for the Project Type pick New Project.\n\nIt will ask you to pick a new Directory name, and where to create that directory (e.g. your Home directory or directory where you usually save your work)\n\nRStudio should now refresh itself. You can now download the data required for the workshop by copying and pasting the following into the R console (as shown in the screenshot)\n\ndownload.file(\"https://github.com/sheffield-bioinformatics-core/r-online/raw/master/CourseData.zip\", destfile = \"CourseData.zip\")\n\n The files from the zip file can be extracted using the command:-\n\nunzip(\"CourseData.zip\")\n\nYour RStudio screen should look like:-\n\nYou will need to install some R packages and download some data before you start. You can install the packages by copying and pasting the following into an R console and pressing ENTER\n\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"readr\")\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"tidyr\")\n\nYou can check that this worked by copying and pasting the following:-\n\nsource(\"https://raw.githubusercontent.com/sheffield-bioinformatics-core/r-online/master/check_packages.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nThe dplyr package has been installed\n\n\nThe ggplot2 package has been installed\n\n\nThe readr package has been installed\n\n\nThe rmarkdown package has been installed\n\n\nThe tidyr package has been installed\n\n\nYou have successfully installed all the packages required for the course\n\n\nIf you want to follow along with the R code on this webpage, you can open the file part1.Rmd from the bottom-right corner of RStudio\n\nThere are equivalent markdown files (part2.Rmd, part3.Rmd) for the other sections of the course. Enjoy!"
  },
  {
    "objectID": "training.html",
    "href": "training.html",
    "title": "Training Materials",
    "section": "",
    "text": "Introduction to R - Part 1\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R - Part 2\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R - Part 3\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to RNA-Seq - Part 1\n\n\n\n\n\n\nMark Dunning\n\n\nOct 7, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "training/r_part2/index.html",
    "href": "training/r_part2/index.html",
    "title": "Introduction to R - Part 2",
    "section": "",
    "text": "Coming Soon…."
  },
  {
    "objectID": "training/bulk-rnaseq_1/index.html",
    "href": "training/bulk-rnaseq_1/index.html",
    "title": "Introduction to RNA-Seq - Part 1",
    "section": "",
    "text": "Coming Soon…."
  },
  {
    "objectID": "training/r_part1/index.html",
    "href": "training/r_part1/index.html",
    "title": "Introduction to R - Part 1",
    "section": "",
    "text": "In these materials, we explore fundamental operations of R and load some example data\n\n\n\n\nBasic calculations in R\nUsing functions\nGetting help\nSaving data using variables\nReading a spreadsheet into R"
  },
  {
    "objectID": "training/r_part3/index.html",
    "href": "training/r_part3/index.html",
    "title": "Introduction to R - Part 3",
    "section": "",
    "text": "Coming Soon…."
  },
  {
    "objectID": "training/r_part1/index.html#topics-covered",
    "href": "training/r_part1/index.html#topics-covered",
    "title": "Introduction to R - Part 1",
    "section": "",
    "text": "Basic calculations in R\nUsing functions\nGetting help\nSaving data using variables\nReading a spreadsheet into R"
  },
  {
    "objectID": "training/r_part1/index.html#variables",
    "href": "training/r_part1/index.html#variables",
    "title": "Introduction to R - Part 1",
    "section": "Variables",
    "text": "Variables\nA variable is a letter or word which takes (or contains) a value. We use the assignment ‘operator’, &lt;- to create a variable and store some value in it.\n\nx &lt;- 10\nx\n\n[1] 10\n\nmyNumber &lt;- 25\nmyNumber\n\n[1] 25\n\n\nWe also can perform arithmetic on variables using functions:\n\nsqrt(myNumber)\n\n[1] 5\n\n\nWe can add variables together:\n\nx + myNumber\n\n[1] 35\n\n\nWe can change the value of an existing variable:\n\nx &lt;- 21\nx\n\n[1] 21\n\n\nWe can set one variable to equal the value of another variable:\n\nx &lt;- myNumber\nx\n\n[1] 25\n\n\nWhen we are feeling lazy we might give our variables short names (x, y, i…etc), but a better practice would be to give them meaningful names. There are some restrictions on creating variable names. They cannot start with a number or contain characters such as . and ‘-’. Naming variables the same as in-built functions in R, such as c, T, mean should also be avoided.\nNaming variables is a matter of taste. Some conventions exist such as a separating words with - or using camelCaps. Whatever convention you decided, stick with it!"
  },
  {
    "objectID": "training/r_part1/index.html#functions",
    "href": "training/r_part1/index.html#functions",
    "title": "Introduction to R - Part 1",
    "section": "Functions",
    "text": "Functions\nFunctions in R perform operations on arguments (the inputs(s) to the function). We have already used:\n\nsin(x)\n\n[1] -0.1323518\n\n\nthis returns the sine of x. In this case the function has one argument: x. Arguments are always contained in parentheses – curved brackets, () – separated by commas.\nArguments can be named or unnamed, but if they are unnamed they must be ordered (we will see later how to find the right order). The names of the arguments are determined by the author of the function and can be found in the help page for the function. When testing code, it is easier and safer to name the arguments. seq is a function for generating a numeric sequence from and to particular numbers. Type ?seq to get the help page for this function.\n\nseq(from = 3, to = 20, by = 4)\n\n[1]  3  7 11 15 19\n\nseq(3, 20, 4)\n\n[1]  3  7 11 15 19\n\n\nArguments can have default values, meaning we do not need to specify values for these in order to run the function.\nrnorm is a function that will generate a series of values from a normal distribution. In order to use the function, we need to tell R how many values we want\n\n## this will produce a random set of numbers, so everyone will get a different set of numbers\nrnorm(n=10)\n\n [1]  0.806381254  0.009572724  0.256176545 -0.799478449 -0.031209190\n [6] -0.990047320 -0.009628842  1.015338023 -1.219448901 -0.429035831\n\n\nThe normal distribution is defined by a mean (average) and standard deviation (spread). However, in the above example we didn’t tell R what mean and standard deviation we wanted. So how does R know what to do? All arguments to a function and their default values are listed in the help page\n(N.B sometimes help pages can describe more than one function)\n\n?rnorm\n\nstarting httpd help server ... done\n\n\nIn this case, we see that the defaults for mean and standard deviation are 0 and 1. We can change the function to generate values from a distribution with a different mean and standard deviation using the mean and sd arguments. It is important that we get the spelling of these arguments exactly right, otherwise R will an error message, or (worse?) do something unexpected.\n\nrnorm(n=10, mean=2,sd=3)\n\n [1] 3.8553415 2.7540968 1.3562094 2.0327935 0.4864066 4.3596440 2.4811970\n [8] 2.9498503 4.4261048 4.2233657\n\nrnorm(10, 2, 3)\n\n [1]  3.641949  7.289001  2.534070  2.755773  3.350632  3.668333 -3.623158\n [8] -3.688888 -1.346465  1.470321\n\n\nIn the examples above, seq and rnorm were both outputting a series of numbers, which is called a vector in R and is the most-fundamental data-type.\nJust as we can save single numbers as a variable, we can also save a vector. In fact a single number is still a vector.\n\nmy_seq &lt;- seq(from = 3, to = 20, by = 4)\n\nThe arithmetic operations we have seen can be applied to these vectors; exactly the same as a single number.\n\nmy_seq + 2\n\n[1]  5  9 13 17 21\n\n\n\nmy_seq * 2\n\n[1]  6 14 22 30 38\n\n\n\n\n\n\nExercise\n\n\nWhat is the value of pi to 3 decimal places?\n\nsee the help for round ?round\n\nHow can we a create a sequence from 2 to 20 comprised of 5 equally-spaced numbers?\n\ni.e. not specifying the by argument and getting R to work-out the intervals\ncheck the help page for seq ?seq\n\nCreate a variable containing 1000 random numbers with a mean of 2 and a standard deviation of 3\n\nwhat is the maximum and minimum of these numbers?\nwhat is the average?\nHINT: see the help pages for functions min, max and mean\n\n\n\n\n\n\n\n\n\n\n\n\nSolutions\n\n\n\n\nround(pi,digits = 3)\n\n[1] 3.142"
  },
  {
    "objectID": "training/r_part1/index.html#saving-your-notebook",
    "href": "training/r_part1/index.html#saving-your-notebook",
    "title": "Introduction to R - Part 1",
    "section": "Saving your notebook",
    "text": "Saving your notebook\nIf you want to re-visit your code at any point, you will need to save a copy.\n\nFile &gt; Save &gt;"
  },
  {
    "objectID": "training/r_part1/index.html#packages-in-r",
    "href": "training/r_part1/index.html#packages-in-r",
    "title": "Introduction to R - Part 1",
    "section": "Packages in R",
    "text": "Packages in R\nSo far we have used functions that are available with the base distribution of R; the functions you get with a clean install of R. The open-source nature of R encourages others to write their own functions for their particular data-type or analyses.\nPackages are distributed through repositories. The most-common ones are CRAN and Bioconductor. CRAN alone has many thousands of packages.\n\n\nThe meta cran website can be used to browse packages available in CRAN\nBioconductor packages can be browsed here\n\n\nCRAN and Bioconductor have some level of curation so should be the first place to look. Researchers sometimes make their packages available on github. However, there is no straightforward way of searching github for a particular package and no guarentee of quality.\nThe Packages tab in the bottom-right panel of RStudio lists all packages that you currently have installed. Clicking on a package name will show a list of functions that available once that package has been loaded.\nThere are functions for installing packages within R. If your package is part of the main CRAN repository, you can use install.packages.\nWe will be using a set of tidyverse R packages in this practical. To install them, we would do.\n\n## You should already have installed these as part of the course setup\n\ninstall.packages(\"readr\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")\n# to install the entire set of tidyverse packages, we can do install.packages(\"tidyverse\"). But this will take some time\n\nA package may have several dependencies; other R packages from which it uses functions or data types (re-using code from other packages is strongly-encouraged). If this is the case, the other R packages will be located and installed too.\nSo long as you stick with the same version of R, you won’t need to repeat this install process.\nOnce a package is installed, the library function is used to load a package and make it’s functions / data available in your current R session. You need to do this every time you load a new RStudio session. Let’s go ahead and load the readr so we can import some data.\n\n## readr is a packages to import spreadsheets into R\nlibrary(readr)"
  },
  {
    "objectID": "training/r_part1/index.html#reading-in-data",
    "href": "training/r_part1/index.html#reading-in-data",
    "title": "Introduction to R - Part 1",
    "section": "Reading in data",
    "text": "Reading in data\nAny .csv file can be imported into R by supplying the path to the file to readr function read_csv and assigning it to a new object to store the result. A useful sanity check is the file.exists function which will print TRUE is the file can be found in the working directory.\n\ngetwd()\n\n[1] \"C:/work/personal_development/markdunning.github.com/training/r_part1\"\n\ngapminder_path &lt;- \"raw_data/gapminder.csv\"\nfile.exists(gapminder_path)\n\n[1] TRUE\n\n\nAssuming the file can be found, we can use read_csv to import. Other functions can be used to read tab-delimited files (read_delim) or a generic read.table function. A data frame object is created.\n\nlibrary(readr)\ngapminder_path &lt;- \"raw_data/gapminder.csv\"\ngapminder &lt;- read_csv(gapminder_path)\n\nRows: 1704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\ndbl (4): year, lifeExp, pop, gdpPercap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nPay Attention\n\n\n\nWhy would specifying gapminder_path as  Users/mark/Documents/workflows/workshops/r-crash-course/raw_data/gapminder.csv be a bad idea? Would you be able to re-run the analysis on another machine?\n\n\n\n\n\n\n\n\nReading from Excel (xls/xlsx) files\n\n\n\nYou can also read excel (.xls or .xlsx) files into R, but you will have to use the readxl package instead.\n\ninstall.packages(\"readxl\")\nlibrary(readxl)\n## Replace PATH_TO_MY_XLS with the name of the file you want to read\ndata &lt;- read_xls(PATH_TO_MY_XLS)\n## Replace PATH_TO_MY_XLSX with the name of the file you want to read\ndata &lt;- read_xlsx(PATH_TO_MY_XLSX)\n\n\n\n\n\n\n\n\n\nIf you get really stuck importing data, there is a File -&gt; Import Dataset option that should guide you through the process. It will also show the corresponding R code that you can use in future.\n\n\n\nThe data frame object in R allows us to work with “tabular” data, like we might be used to dealing with in Excel, where our data can be thought of having rows and columns. The values in each column have to all be of the same type (i.e. all numbers or all text).\nIn Rstudio, you can view the contents of the data frame we have just created using function View(). This is useful for interactive exploration of the data, but not so useful for automation, scripting and analyses.\n\n## Make sure that you use a capital letter V\n\nView(gapminder)\n\n\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nWe should always check the data frame that we have created. Sometimes R will happily read data using an inappropriate function and create an object without raising an error. However, the data might be unusable. Consider:-\n\ntest &lt;- read_table(gapminder_path)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  `\"country\",\"continent\",\"year\",\"lifeExp\",\"pop\",\"gdpPercap\"` = col_character()\n)\n\n\nWarning: 324 parsing failures.\nrow col  expected    actual                     file\n145  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n146  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n147  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n148  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n149  -- 1 columns 3 columns 'raw_data/gapminder.csv'\n... ... ......... ......... ........................\nSee problems(...) for more details.\n\n\n\nView(test)\n\n\n\n# A tibble: 1,704 × 1\n   `\"country\",\"continent\",\"year\",\"lifeExp\",\"pop\",\"gdpPercap\"` \n   &lt;chr&gt;                                                      \n 1 \"\\\"Afghanistan\\\",\\\"Asia\\\",1952,28.801,8425333,779.4453145\" \n 2 \"\\\"Afghanistan\\\",\\\"Asia\\\",1957,30.332,9240934,820.8530296\" \n 3 \"\\\"Afghanistan\\\",\\\"Asia\\\",1962,31.997,10267083,853.10071\"  \n 4 \"\\\"Afghanistan\\\",\\\"Asia\\\",1967,34.02,11537966,836.1971382\" \n 5 \"\\\"Afghanistan\\\",\\\"Asia\\\",1972,36.088,13079460,739.9811058\"\n 6 \"\\\"Afghanistan\\\",\\\"Asia\\\",1977,38.438,14880372,786.11336\"  \n 7 \"\\\"Afghanistan\\\",\\\"Asia\\\",1982,39.854,12881816,978.0114388\"\n 8 \"\\\"Afghanistan\\\",\\\"Asia\\\",1987,40.822,13867957,852.3959448\"\n 9 \"\\\"Afghanistan\\\",\\\"Asia\\\",1992,41.674,16317921,649.3413952\"\n10 \"\\\"Afghanistan\\\",\\\"Asia\\\",1997,41.763,22227415,635.341351\" \n# ℹ 1,694 more rows\n\n\nQuick sanity checks can also be performed by inspecting details in the environment tab. A useful check in RStudio is to use the head function, which prints the first 6 rows of the data frame to the screen.\n\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\nWe have used a nice, clean, dataset as our example for the workshop. Other datasets out in the wild might not be so ameanable for analysis in R. If your data look like this, you might have problems:- \nWe recommend the Data Carpentry materials on spreadsheet organisation for an overview of common pitfalls - and how to address them\n\nhttps://datacarpentry.org/spreadsheet-ecology-lesson/"
  },
  {
    "objectID": "training/r_part1/index.html#accessing-data-in-columns",
    "href": "training/r_part1/index.html#accessing-data-in-columns",
    "title": "Introduction to R - Part 1",
    "section": "Accessing data in columns",
    "text": "Accessing data in columns\nIn the next section we will explore in more detail how to control the columns and rows from a data frame that are displayed in RStudio. For now, accessing all the observations from a particular column can be achieved by typing the $ symbol after the name of the data frame followed by the name of a column you are interested in.\nRStudio is able to “tab-complete” the column name, so typing the following and pressing the TAB key will bring-up a list of possible columns. The contents of the column that you select are then printed to the screen.\n\ngapminder$c\n\nRather than merely printing to the screen we can also create a variable\n\nyears &lt;- gapminder$year\n\nWe can then use some of the functions we have seen before\n\nmin(years)\n\n[1] 1952\n\nmax(years)\n\n[1] 2007\n\nmedian(years)\n\n[1] 1979.5\n\n\nAlthough we don’t have to save the values in the column as a variable first\n\nmin(gapminder$year)\n\n[1] 1952"
  },
  {
    "objectID": "training/r_part1/index.html#creating-a-new-r-notebook",
    "href": "training/r_part1/index.html#creating-a-new-r-notebook",
    "title": "Introduction to R - Part 1",
    "section": "Creating a new R notebook",
    "text": "Creating a new R notebook\nYou will probably want to create a new R notebook file to perform your analysis. This can be done by following the menus:-\n\nFile -&gt; New File -&gt; R notebook\n\nA new pane should open that includes some example code. You can delete everything apart from lines 1 to 4\n\nYou can now insert R code chunks using the insert menu.\nBefore generating a report you will need to save the file with the menu File -&gt; Save. You will then be able to create a report using the Preview button. N.B. you may need to install extra software before doing this.\n\n\n\n\nExercise before the next session\n\n\nCreate a new R notebook using the instructions above and create a code chunk to read the gapminder.csv file. Answer the following questions and generate a report\n\nThe function tail is similar to head except it prints the last lines in a file. Use this function to print the last 10 lines in the data frame (you will have to consult the help on tail to see how to change the default arguments.)\nWhat is the largest observed population?\nWhat is the lowest life expectancy"
  }
]